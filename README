A compiler for the Grace language.

Minigrace compiles Grace to C and JavaScript, and experimentally to
Java. The compiler is written in Grace itself. It supports most of the
specified language to date: for details on current language feature
support see <doc/errata>.

Minigrace should work on POSIX-compliant systems, and is known to work
on Linux, NetBSD, and Mac OS X. It requires a properly-configured GCC on
the path, which may require installing development tools.

The Git repository is capable of bootstrapping itself. Simply running
`make` should cause all required previous versions to be built along
with the current trunk. This process may take some time, perhaps 10
minutes, and requires GNU make. Alternatively, a script is provided to
bootstrap from one of the release tarballs. Running
tools/tarball-bootstrap will provide instructions on finding and using
this tarball.

A tarball distribution can be compiled using `./configure` and `make`.

After building there will be a `minigrace` executable in the root. This
executable supports a few different modes and options:
- Execute a script in the simplest way possible:
  ./minigrace --run file.grace
  In most cases, this command will be all that is required.
- Produce a native executable:
  ./minigrace --make file.grace
  This mode produces an executable called "file".
- Describe what it is doing while it goes:
  ./minigrace --verbose [...]
- Use another backend:
  ./minigrace --target java file.grace
  ./minigrace --target js -o file.js file.grace
  There are also other targets for specialised purposes. Use
  --target help to list them.
- Set the location of the standard Grace library code to link against:
  ./minigrace --gracelib path [...]
- Disable static type checking:
  ./minigrace -XIgnoreTypes [...]
- Enable tail call support:
  ./minigrace -XTailCall [...]

The resulting output will be generated in the same directory as the input. The
minigrace executable may be located elsewhere, and will find its support files
alongside itself.

Some other Makefile targets may also be of interest:
- make test
  Runs the test suite. All tests are expected to pass; if any do not,
  please send the tests/test.log file to the author.
- make java
  Builds the compiler in Java. There is a java/minigracej script with
  the same command syntax as the main minigrace executable to run the
  compiler in the right environment. The Java backend is experimental
  and not suitable for general use.
- make js
  Builds the web frontend and JavaScript compiler, as used on
  <http://ecs.vuw.ac.nz/~mwh/minigrace/js/>. The frontend is accessible
  in js/index.html. Note that in general the file must be served over
  HTTP for the test cases to load. The JavaScript back- and front-ends
  are suitable for quick testing, but have some limitations compared to
  the native compiler, and particularly do not support Unicode in any
  way.


Platform notes
--------------

On Mac OS X, Xcode is required to compile. The environment must be set
up to ensure that gcc and ld are in the path and that GCC is able to
compile C code. Setting the following environment variables is known to
be required in many cases:
  PATH
  C_INCLUDE_PATH
  LIBRARY_PATH
The script c/environ-Darwin attempts to detect and set up these
variables correctly.

It is unknown whether the compiler works under Cygwin, but any failures
there should be considered bugs and reported.


Interoperability
----------------
None.

No backend or platform provides foreign functions or access to the
underlying platform. Manual platform glue code may be possible to bind
particular functionality; see <doc/interop> for details.
